{"version":3,"sources":["Data.csv","components/header/Header.js","components/mainApp/MainApp.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","Component","MainApp","props","onMapClick","uploadAndParse","e","_this","preventDefault","d3","myData","then","data","setState","d3ParsedData","handleInputChange","type","trueTarget","falseTarget","fileData","target","files","fileName","value","split","destroyMap","createMap","generateMap","pointData","state","length","map","item","i","source","from_lat","from_long","destination","to_lat","to_long","mapInstance","setView","L","tileLayer","attribution","maxZoom","addTo","marker","bindPopup","remove","parsedData","pointType","onSubmit","this","bind","id","onChange","htmlFor","name","checked","required","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4c8b55ef.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Data.97a0d9a8.csv\";","import React, {Component} from \"react\";\n\nclass Header extends Component {\n  render() {\n    return (\n      <header>\n        <nav className=\"bg-light p-3\">\n          <div className=\"text-center\">\n            <h3>Data Visualizer</h3>\n          </div>\n        </nav>\n      </header>\n    );\n  }\n}\n\nexport default Header;\n","import React, { Component } from \"react\";\nimport \"./mainapp.css\";\n\nimport Papa from \"papaparse\";\nimport * as d3 from \"d3\";\nimport L from \"leaflet\";\n\nimport myData from \"../../Data.csv\";\n\nclass MainApp extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      fileData: \"\",\n      fileName: \"\",\n      parsedData: null,\n      d3ParsedData: [],\n      source: false,\n      destination: false,\n      pointType: null,\n      pointData: null,\n      mapInstance: null\n    };\n  }\n\n  onMapClick = () => {};\n\n  uploadAndParse = e => {\n    const _this = this;\n    e.preventDefault();\n    // Papa.parse(this.state.fileData, {\n    //   complete: function(results) {\n    //     _this.setState({ parsedData: results.data });\n    //   }\n    // });\n    d3.csv(myData).then(function(data) {\n      _this.setState({ d3ParsedData: data });\n    });\n  };\n\n  handleInputChange = (type, trueTarget, falseTarget, e) => {\n    if (type === \"file\") {\n      this.setState({\n        fileData: e.target.files[0],\n        fileName: e.target.value.split(\"\\\\\")[2]\n      });\n    }\n    if (type === \"radio\") {\n      this.setState({\n        [trueTarget]: true,\n        [falseTarget]: false,\n        pointType: trueTarget\n      });\n      this.destroyMap();\n      this.createMap();\n    }\n  };\n\n  generateMap = e => {\n    let pointData = [];\n    e.preventDefault();\n    if (this.state.d3ParsedData.length > 0) {\n      pointData = this.state.d3ParsedData.map((item, i) =>\n        this.state.source\n          ? [\"Source point \" + i, item.from_lat, item.from_long]\n          : this.state.destination\n          ? [\"Destination point \" + i, item.to_lat, item.to_long]\n          : []\n      );\n    }\n    if (pointData.length > 0) {\n      this.state.mapInstance.setView([pointData[0][1], pointData[0][2]], 10);\n      let mapLink = '<a href=\"http://openstreetmap.org\">OpenStreetMap</a>';\n      L.tileLayer(\"http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\", {\n        attribution: \"&copy; \" + mapLink + \" Contributors\",\n        maxZoom: 18\n      }).addTo(this.state.mapInstance);\n      for (let i = 0; i < 1000; i++) {\n        if (pointData[i][1] !== \"NULL\" || pointData[i][2] !== \"NULL\") {\n          new L.marker([pointData[i][1], pointData[i][2]])\n            .bindPopup(pointData[i][0])\n            .addTo(this.state.mapInstance);\n        }\n      }\n    }\n  };\n\n  createMap = () => {\n    this.setState({ mapInstance: L.map(\"mapDiv\") });\n  };\n\n  destroyMap = () => {\n    if (this.state.mapInstance) {\n      this.state.mapInstance.remove();\n    }\n  };\n\n  render() {\n    return (\n      <main>\n        <div className=\"container-fluid\">\n          <div className=\"main-div mt-4 mb-4\">\n            <div className=\"row\">\n              <div className=\"col-12 col-sm-6\">\n                <div className=\"form-div\">\n                  <form onSubmit={this.uploadAndParse.bind(null)}>\n                    <div className=\"form-group\">\n                      <div className=\"head-div\">\n                        <h3>\n                          Choose the relevant .csv file to visualize the data\n                        </h3>\n                      </div>\n                      <div className=\"custom-file\">\n                        <input\n                          type=\"file\"\n                          className=\"custom-file-input\"\n                          id=\"customFile\"\n                          onChange={this.handleInputChange.bind(\n                            null,\n                            \"file\",\n                            null,\n                            null\n                          )}\n                        />\n                        <label\n                          className=\"custom-file-label\"\n                          htmlFor=\"customFile\"\n                        >\n                          {this.state.fileName\n                            ? this.state.fileName\n                            : \"Choose file\"}\n                        </label>\n                      </div>\n                      <div>\n                        <button className=\"btn btn-primary mt-3\" type=\"submit\">\n                          Upload the file(Click here for now to initiate)\n                        </button>\n                      </div>\n                    </div>\n                  </form>\n                  <div className=\"main-filter\">\n                    <h5>\n                      Choose the option below to display points on the map:\n                    </h5>\n                    <form onSubmit={this.generateMap.bind(null)}>\n                      <div className=\"custom-control custom-radio custom-control-inline\">\n                        <label>\n                          <input\n                            type=\"radio\"\n                            name=\"filter-radio-btn\"\n                            checked={this.state.source}\n                            className=\"radio-btn\"\n                            onChange={this.handleInputChange.bind(\n                              null,\n                              \"radio\",\n                              \"source\",\n                              \"destination\"\n                            )}\n                            required\n                          />\n                          All the source point of the taxi\n                        </label>\n                      </div>\n                      <div className=\"custom-control custom-radio custom-control-inline\">\n                        <label>\n                          <input\n                            type=\"radio\"\n                            name=\"filter-radio-btn\"\n                            className=\"radio-btn\"\n                            onChange={this.handleInputChange.bind(\n                              null,\n                              \"radio\",\n                              \"destination\",\n                              \"source\"\n                            )}\n                            checked={this.state.destination}\n                            required\n                          />\n                          All the destination point of the taxi\n                        </label>\n                      </div>\n                      <div>\n                        <button className=\"btn btn-primary mt-3\" type=\"submit\">\n                          Generate Map\n                        </button>\n                      </div>\n                    </form>\n                    <div>\n                      <button className=\"btn btn-primary mt-3\" type=\"submit\">\n                        Click here for more visualization\n                      </button>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div className=\"col-12 col-sm-6\">\n                <div className=\"map-container\">\n                  <div className=\"map\" id=\"mapDiv\"></div>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className=\"sec-div\">\n\n          </div>\n        </div>\n      </main>\n    );\n  }\n}\n\nexport default MainApp;\n","import React from \"react\";\nimport \"./App.css\";\n\nimport Header from \"./components/header/Header\";\nimport MainApp from \"./components/mainApp/MainApp\";\n\nfunction App() {\n  return (\n    <div className=\"\">\n      <Header></Header>\n      <MainApp></MainApp>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}